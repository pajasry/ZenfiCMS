# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AttachEntity {
  id: String!
  key: String!
  mimetype: String!
  name: String!
  path: String!
}

type ClientPageOutput {
  item: PickObjectType
}

input CreatePageInput {
  description: String!
  name: String!
  path: String
  statusId: String
  subpagesIds: [String!]
}

input CreatePasswordInput {
  password: String!
  token: String!
}

input CreateUserInput {
  email: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String!
  user: UserEntity!
}

type Mutation {
  createPage(createPageInput: CreatePageInput!): PageOutput!
  createPassword(createPasswordInput: CreatePasswordInput!): Boolean!
  createUser(createUserInput: CreateUserInput!): UserOutput!
  deletePage(id: String!): Boolean!
  login(loginInput: LoginInput!): LoginOutput!
  resetPassword(resetPasswordInput: ResetPasswordInput!): Boolean!
  setHomepage(id: String!): Boolean!
  updatePage(id: String!, updatePageInput: UpdatePageInput!): PageOutput!
}

type PageEntity {
  author: UserEntity!
  authorId: String!
  createdAt: DateTime!
  description: String!
  id: String!
  isHomepage: Boolean!
  name: String!
  parent: PageEntity
  parentId: String
  path: String!
  status: PageStatusEntity!
  statusId: String!
  subpages: [PageEntity!]
  thumbnail: AttachEntity
  thumbnailId: String
  updatedAt: DateTime!
}

type PageOutput {
  item: PageEntity
}

type PageStatusEntity {
  id: String!
  name: String!
  variant: String!
}

type PageStatusesOutput {
  count: Float!
  items: [PageStatusEntity!]!
}

type PagesOutput {
  count: Float!
  items: [PageEntity!]!
}

type PickObjectType {
  description: String!
  name: String!
  path: String!
  status: PageStatusEntity!
}

type Query {
  clientPage(path: String!): ClientPageOutput!
  me: UserOutput!
  page(id: String!): PageOutput!
  pageStatuses: PageStatusesOutput!
  pages(except: String, hasSubpages: Boolean, isHomepage: Boolean, parentId: String, skip: Int = 0, take: Int = 25): PagesOutput!
  user(id: String!): UserOutput!
  users: UsersOutput!
}

input ResetPasswordInput {
  email: String!
}

input UpdatePageInput {
  description: String
  name: String
  path: String
  statusId: String
  subpagesIds: [String!]
}

type UserEntity {
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
  username: String!
}

type UserOutput {
  item: UserEntity
}

type UsersOutput {
  count: Float!
  items: [UserEntity!]!
}